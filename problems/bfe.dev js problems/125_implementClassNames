/*
  classNames() accepts arbitrary arguments, filter out the falsy values, and generate the final className string.

  1. string and number are used directly.

  classNames('BFE', 'dev', 100) 
  // 'BFE dev 100'

  2. other primitives are ignored.

  classNames(
    null, undefined, Symbol(), 1n, true, false
  ) 
  // ''

  3. Object's enumerable property keys are kept if the key is string and value is truthy. Array should be flattened.

  const obj = new Map()
  obj.cool = '!'

  classNames({BFE: [], dev: true, is: 3}, obj) 
  // 'BFE dev is cool'

  classNames(['BFE', [{dev: true}, ['is', [obj]]]])
  // 'BFE dev is cool'
  
*/


function classNames(...args) {
  let result = [];

  function processArgs(arg){
    if(( typeof arg === 'string' || 
    typeof arg ==='number' || 
    (typeof arg === 'object'&& arg !== null)
    )) {
      
      if(Array.isArray(arg)){
        for(let item of arg){
          processArgs(item);
        }
      }else if(typeof arg === 'object' && arg!==null){
        for(let [key,value] of Object.entries(arg)){
          if(Boolean(value)){
            processArgs(key);
          }
        }
      }else{
        result.push(arg);
      }
    }
  }
  for(let arg of args){
    processArgs(arg);
  }

  return result.join(' ');
}

const obj = new Map()
obj.cool = '!'

console.log(classNames('BFE', 'dev', 100))
console.log(classNames('BFE',111,[1,2]))
console.log(classNames([2,1,'safsfj']))
console.log(classNames(null, undefined, Symbol(), 1n, true, false))
console.log(classNames(['BFE', [{dev: true}, ['is', [obj]]]]))
console.log(classNames({BFE: [], dev: true, is: 3},obj))
